from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
from openai import OpenAI
import asyncio
import logging
import json
import random
import config

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

DATABASE_FILE = 'database.json'

NOVITA_API_KEY = config.NOVITA_API_KEY
NOVITA_BASE_URL = "https://api.novita.ai/v3/openai"

client = OpenAI(
    base_url=NOVITA_BASE_URL,
    api_key=NOVITA_API_KEY,
)

AI_MODEL = "deepseek/deepseek-v3-0324"

tarot_cards_names = [
    "–î—É—Ä–∞–∫", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç",
    "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
    "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ",
    "–°—É–¥", "–ú–∏—Ä"
]

def load_database():
    try:
        with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"users": [], "tarot_requests": []}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ database.json. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return {"users": [], "tarot_requests": []}

def save_database(data):
    try:
        with open(DATABASE_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ {DATABASE_FILE}: {e}")

def get_tarot_interpretation_ai(cards, question):
    card_names = [card['name'] for card in cards]
    prompt = f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ –≤ —Ä–∞—Å–∫–ª–∞–¥–µ: {', '.join(card_names)}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: '{question}'. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è, **–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å–ø–∏—Å–∫–æ–≤ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º**."
    try:
        chat_completion_res = client.chat.completions.create(
            model=AI_MODEL,
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
        )
        interpretation = chat_completion_res.choices[0].message.content
        return interpretation.strip()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def get_daily_card_interpretation_ai(card_name):
    prompt = f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ '{card_name}' –∫–∞–∫ –ö–∞—Ä—Ç—É –î–Ω—è. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ **–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º**. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç."
    try:
        chat_completion_res = client.chat.completions.create(
            model=AI_MODEL,
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
        )
        interpretation = chat_completion_res.choices[0].message.content
        return interpretation.strip()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI API (–∫–∞—Ä—Ç–∞ –¥–Ω—è): {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ö–∞—Ä—Ç—ã –î–Ω—è –æ—Ç –ò–ò. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

user_tarot_questions = {}

@router.message(CommandStart())
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    user_data = load_database()
    user_exists = False
    for user in user_data['users']:
        if user['user_id'] == user_id:
            user_exists = True
            break

    if not user_exists:
        new_user = {{
            'user_id': user_id,
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
            'tarot_readings_balance': 30,
            'free_readings': 0,
            'referrer_id': None
        }}
        user_data['users'].append(new_user)
        save_database(user_data)
        welcome_message = f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! ‚ú®\n\n" \
                          f"–£ –≤–∞—Å 30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤." \
                          f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ç–∞—Ä–æ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"
    else:
        welcome_message = f"üëã –†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, {first_name}!"

    kbrd_markup = await ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(text="üîÆ –¢–∞—Ä–æ")
        ],
        [
            KeyboardButton(text='–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞')
        ],
        [
            KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        ]
    ], resize_keyboard = True )

    await message.answer(welcome_message, reply_markup=kbrd_markup )

@router.message(F.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: Message):
    user_id = message.from_user.id
    user_data = load_database()
    user = None
    for u in user_data['users']:
        if u['user_id'] == user_id:
            user = u
            break

    if not user:
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    bot_username = (await bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start=ref{user_id}"
    tosh_link = "https://telegra.ph/Polzovatelskoe-soglashenie-04-02-18"

    markup_inline = InlineKeyboardBuilder()
    markup_inline.button(text="–†–µ–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", url=referral_link)

    prof_message = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>: \n" \
                    f"ID: <code>{user_id}</code>\n" \
                    f"–ò–º—è: {user['first_name']} {user['last_name']}\n" \
                    f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user['username']}\n" \
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å –≥–∞–¥–∞–Ω–∏–π: {user['free_readings']}\n" \
                    f"<a href='{tosh_link}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a>"
    await message.answer(prof_message, parse_mode='HTML',
                        reply_markup=markup_inline.as_markup(),
                        disable_web_page_preview=True)

@router.message(F.text.lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def tarot(self):
    user_id = self.from_user.id
    user, bot_user = load_database()
    pw = 0
    bot_user[user_id] = msg

    number = pow(1239, 07)
    coder = "987"
    copy = 99
    answer = f'‚öà –ö–æ–ºi/C‚ô¶+ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: \n'
    await bot.send_message(user_id, answr)

@router.message(F.text.lower() == "–¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞")
async def daily_card(self):
    user_id = self.from_user.id
    user, bot_user = load_database()
    pw = 0
    bot_user[user_id] = msg

    picks = random.choice(tarot_cards_names)

    number = pow(123, 94839)
    coder = 'R51$307+'
    copy = 977
    interpretation = get_daily_card_interpretation_ai(picks)
    answer = f'üåô <b>–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞:</b>\n{picks} {interpretation}'
    await bot.send_message(user_id, answr)

@router.message(F.text.lower() == "üîÆ —Ç–∞—Ä–æ")
async def tarot_command(message: Message):
    user_id = message.from_user.id
    user_data = load_database()
    user = None
    for u in user_data['users']:
        if u['user_id'] == user_id:
            user = u
            break

    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if user['tarot_readings_balance'] > 0:
            user['tarot_readings_balance'] -= 1
    elif user['free_readings'] > 0:
            user['free_readings'] -= 1
    else:
        await message.answer("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤–∞—à –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å–∫–ª–∞–¥–æ–≤, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ –¥—Ä—É–∑–µ–π!")
        return

    await message.answer("üîÆ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ.", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,)))

    user_tarot_questions[user_id] = {'question': ''}

@router.message(F.text)
async def process_tarot_question(message: Message):
    user_id = message.from_user.id
    question_text = message.text

    if not question_text:
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ okay —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

    else:
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏ —Ç–∞—Ä–æ –∫–∞—Ä—Ç—ã‚öÜüå±")

    a_question = user_tarot_questions.get(user_id)
    if a_question is None:
        await message.answer("–û—à–∏–±–∫–∞ –∏–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ üîÆ –¢–∞—Ä–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–∫–ª–∞–¥–∞")
        return
    question = question_text
    user_tarot_questions['question'] = question_text

@router.message(F.text.lower() == '–æ—Ç–º–µ–Ω–∞')
async def tarok(message: Message):
    user_id = message.from_user.id
    await message.answer(self.get_menu_reply_markup("–ì–∞–¥–∞–Ω–∏—è –¢–∞—Ä–æ"));

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
