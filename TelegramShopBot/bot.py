import telebot
from telebot import types
import os
import csv
import datetime
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN") or "" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_USER_IDS = [int(admin_id) for admin_id in (os.environ.get("1324", "123").split(','))] # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∞
ADMIN_GROUP_ID = os.environ.get("ADMIN_GROUP_ID") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
ENABLE_PROMOCODES = True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤–∫–ª—é—á–µ–Ω—ã

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–í –ø–∞–º—è—Ç–∏, –¥–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î) ---
products = {} # product_id: {'name': ..., 'description': ..., 'price': ..., 'category': ..., 'stock': ..., 'image': ...}
categories = {} # category_id: 'category_name'
user_carts = {} # user_id: {product_id: quantity}
user_data = {} # user_id: {'name': ..., 'payment_method': ...}
sales_log = [] # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∑–∞–∫–∞–∑–æ–≤
promocodes_enabled = ENABLE_PROMOCODES
user_states = {} # user_id: {'state': ..., 'data': ...} # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

bot = telebot.TeleBot(BOT_TOKEN)
logging.basicConfig(level=logging.INFO) # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_admin(user_id):
    return user_id in ADMIN_USER_IDS

def get_product_list_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    for category_id, category_name in categories.items():
        markup.add(types.InlineKeyboardButton(category_name, callback_data=f'category_{category_id}'))
    markup.add(types.InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data='show_cart'))
    return markup

def get_categories_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    for category_id, category_name in categories.items():
        markup.add(types.InlineKeyboardButton(category_name, callback_data=f'category_{category_id}'))
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏", callback_data='admin_menu'))
    return markup

def get_products_in_category_keyboard(category_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for prod_id, prod_data in products.items():
        if prod_data['category'] == category_id:
            markup.add(types.InlineKeyboardButton(f"{prod_data['name']} - {prod_data['price']}‚ÇΩ", callback_data=f'product_{prod_id}'))
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data='show_catalog'))
    return markup

def get_cart_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ", callback_data='checkout'))
    markup.add(types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóëÔ∏è", callback_data='clear_cart'))
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥ ‚óÄÔ∏è", callback_data='show_catalog'))

    if user_carts.get(user_id):
        for product_id in list(user_carts[user_id].keys()): # list() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è
            prod_name = products.get(product_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
            markup.row(types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {prod_name}", callback_data=f'remove_from_cart_{product_id}'))
    return markup

def get_order_confirmation_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data='confirm_order'),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å ‚úèÔ∏è", callback_data='edit_order'),
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data='cancel_order')
    )
    return markup

def get_admin_menu_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–¢–æ–≤–∞—Ä—ã üì¶", callback_data='admin_products'),
        types.InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üìÇ", callback_data='admin_categories'),
        types.InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥—ã üé´", callback_data='admin_promocodes'),
        types.InlineKeyboardButton("–°–∫–ª–∞–¥ üìä", callback_data='admin_stock'),
        types.InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç üì§üì•", callback_data='admin_export_import'),
        types.InlineKeyboardButton("–õ–æ–≥ –ü—Ä–æ–¥–∞–∂ üìú", callback_data='admin_sales_log'),
        types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ üì¢", callback_data='admin_broadcast'),
        types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ üö™", callback_data='admin_exit')
    )
    return markup

def get_admin_products_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ‚ûï", callback_data='admin_add_product'),
        types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä ‚úèÔ∏è", callback_data='admin_edit_product'),
        types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏", callback_data='admin_menu'))
    return markup

def get_admin_categories_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ûï", callback_data='admin_add_category'),
        types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏", callback_data='admin_menu'))
    return markup

def get_admin_stock_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ üëÅÔ∏è", callback_data='admin_view_stock'),
        types.InlineKeyboardButton("–°–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä ‚ûñ", callback_data='admin_adjust_stock'),
        types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏", callback_data='admin_menu'))
    return markup

def get_admin_export_import_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ üì§", callback_data='admin_export_products'),
        types.InlineKeyboardButton("–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ üì•", callback_data='admin_import_products'),
        types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏", callback_data='admin_menu'))
    return markup

def format_cart(user_id):
    cart_items = user_carts.get(user_id, {})
    if not cart_items:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    cart_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    total_price = 0
    for product_id, quantity in cart_items.items():
        product = products.get(product_id)
        if product:
            item_price = product['price'] * quantity
            cart_text += f"- {product['name']} x{quantity} - {item_price}‚ÇΩ\n"
            total_price += item_price
    cart_text += f"\n–ò—Ç–æ–≥–æ: {total_price}‚ÇΩ"
    return cart_text

def format_order_confirmation(user_id, payment_method, promocode=None):
    cart_text = format_cart(user_id)
    user_info_text = ""
    if user_data.get(user_id):
        user_info_text = f"\n\n–ò–º—è: {user_data[user_id].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}"
    else:
        user_info_text = f"\n\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}"
    if promocode:
        user_info_text += f"\n–ü—Ä–æ–º–æ–∫–æ–¥: {promocode}"

    return cart_text + user_info_text

def generate_product_id():
    return str(len(products) + 1)

def generate_category_id():
    return str(len(categories) + 1)

def export_products_to_csv():
    filename = "products_export.csv"
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['product_id', 'name', 'description', 'price', 'category', 'stock']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for prod_id, prod_data in products.items():
            writer.writerow({'product_id': prod_id, **prod_data})
    return filename

def export_products_to_txt():
    filename = "products_export.txt"
    with open(filename, 'w', encoding='utf-8') as txtfile:
        for prod_id, prod_data in products.items():
            txtfile.write(f"ID: {prod_id}\n")
            txtfile.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {prod_data['name']}\n")
            txtfile.write(f"–û–ø–∏—Å–∞–Ω–∏–µ: {prod_data['description']}\n")
            txtfile.write(f"–¶–µ–Ω–∞: {prod_data['price']}\n")
            txtfile.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {categories.get(prod_data['category'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
            txtfile.write(f"–û—Å—Ç–∞—Ç–æ–∫: {prod_data['stock']}\n\n")
    return filename

def set_user_state(user_id, state, data=None):
    user_states[user_id] = {'state': state, 'data': data}

def get_user_state(user_id):
    return user_states.get(user_id, {}).get('state')

def get_user_state_data(user_id):
    return user_states.get(user_id, {}).get('data')

def clear_user_state(user_id):
    if user_id in user_states:
        del user_states[user_id]


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_catalog = types.KeyboardButton('–ö–∞—Ç–∞–ª–æ–≥')
    btn_cart = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞')
    btn_contact = types.KeyboardButton('–°–≤—è–∑—å')
    markup.add(btn_catalog, btn_cart, btn_contact)
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {user.username or user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤. –ù–∞–∂–º–∏—Ç–µ –ö–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ö–æ—Ä–∑–∏–Ω–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=markup)

@bot.message_handler(regexp='^–°–≤—è–∑—å$')
def contact_us_start(message):
    set_user_state(message.from_user.id, 'waiting_for_question')
    bot.reply_to(message, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'waiting_for_question')
def contact_us_message(message):
    user = message.from_user
    admin_message = f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user.username or user.first_name}](tg://user?id={user.id}) (ID: {user.id}):\n\n{message.text}"
    for admin_id in ADMIN_USER_IDS:
        bot.send_message(chat_id=admin_id, text=admin_message, parse_mode="Markdown", disable_web_page_preview=True)
    bot.reply_to(message, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    clear_user_state(message.from_user.id)


@bot.message_handler(regexp='^–ö–∞—Ç–∞–ª–æ–≥$')
def show_catalog(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_product_list_keyboard())

@bot.message_handler(regexp='^–ö–æ—Ä–∑–∏–Ω–∞$')
def show_cart(message):
    user_id = message.from_user.id
    cart_text = format_cart(user_id)
    bot.reply_to(message, cart_text, reply_markup=get_cart_keyboard(user_id))

@bot.callback_query_handler(func=lambda call: call.data == 'clear_cart')
def clear_cart_callback(call):
    user_id = call.from_user.id
    user_carts[user_id] = {}
    bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_product_list_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == 'checkout')
def checkout_start_callback(call):
    user_id = call.from_user.id
    if not user_carts.get(user_id) or not user_carts[user_id]:
        bot.answer_callback_query(call.id, text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    if not user_data.get(user_id) or 'name' not in user_data[user_id]:
        set_user_state(user_id, 'waiting_for_name')
        bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞:")
    else:
        set_user_state(user_id, 'waiting_for_payment_method')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ'), types.KeyboardButton('–ö–∞—Ä—Ç–∞'))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'waiting_for_name')
def get_name_handler(message):
    user_id = message.from_user.id
    user_data[user_id] = user_data.get(user_id, {})
    user_data[user_id]['name'] = message.text
    set_user_state(user_id, 'waiting_for_payment_method')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ'), types.KeyboardButton('–ö–∞—Ä—Ç–∞'))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'waiting_for_payment_method', content_types=['text'])
def get_payment_method_handler(message):
    user_id = message.from_user.id
    payment_method = message.text
    user_state_data = get_user_state_data(user_id) or {}

    if payment_method.lower() == '–∫–∞—Ä—Ç–∞': # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–ö–∞—Ä—Ç–∞"
        payment_method = "–ö–∞—Ä—Ç–∞ (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞)" # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        bot.send_message(message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π. \n\n**–í–∞–∂–Ω–æ:** –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑.", parse_mode='Markdown') # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_state_data['payment_method'] = payment_method
    set_user_state(user_id, 'waiting_for_promocode_choice', data=user_state_data)


    if promocodes_enabled:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–î–∞'), types.KeyboardButton('–ù–µ—Ç'))
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?", reply_markup=markup)
        set_user_state(user_id, 'waiting_for_promocode_choice', data={'payment_method': payment_method})

    else:
         payment_method = get_user_state_data(user_id)['payment_method']
         order_confirmation_text = format_order_confirmation(user_id, payment_method)
         markup_confirm = get_order_confirmation_keyboard()
         bot.send_message(message.chat.id, order_confirmation_text, reply_markup=markup_confirm)
         clear_user_state(user_id)
         set_user_state(user_id, 'order_confirmation_pending', data={'payment_method': payment_method})
         bot.reply_to(message, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑", reply_markup=types.ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤—É —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'waiting_for_promocode_choice', content_types=['text'])
def promocode_choice_handler(message):
    user_id = message.from_user.id
    answer = message.text.lower()

    if answer == '–¥–∞':
        set_user_state(user_id, 'waiting_for_promocode_input', data=get_user_state_data(user_id))
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=types.ReplyKeyboardRemove())

    elif answer == '–Ω–µ—Ç':
        user_state_data = get_user_state_data(user_id)
        user_state_data['promocode'] = None
        set_user_state(user_id, 'order_confirmation_pending', data=user_state_data) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
        payment_method = user_state_data['payment_method']
        order_confirmation_text = format_order_confirmation(user_id, payment_method)
        markup_confirm = get_order_confirmation_keyboard()
        bot.send_message(message.chat.id, order_confirmation_text, reply_markup=markup_confirm)
        bot.reply_to(message, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑", reply_markup=types.ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'waiting_for_promocode_input', content_types=['text'])
def promocode_input_handler(message):
    user_id = message.from_user.id
    promocode = message.text
    user_state_data = get_user_state_data(user_id)
    user_state_data['promocode'] = promocode
    set_user_state(user_id, 'order_confirmation_pending', data=user_state_data) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –ø—Ä–æ–º–æ–∫–æ–¥
    payment_method = user_state_data['payment_method']
    order_confirmation_text = format_order_confirmation(user_id, payment_method, promocode)
    markup_confirm = get_order_confirmation_keyboard()
    bot.send_message(message.chat.id, order_confirmation_text, reply_markup=markup_confirm)
    bot.reply_to(message, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑", reply_markup=types.ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤—É –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞


@bot.callback_query_handler(func=lambda call: call.data == 'confirm_order')
def confirm_order_callback(call):
    user_id = call.from_user.id
    user_state_data = get_user_state_data(user_id)
    payment_method = user_state_data.get('payment_method', '–ù–µ —É–∫–∞–∑–∞–Ω')
    promocode = user_state_data.get('promocode')

    order_text_admin = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: [{call.from_user.username or call.from_user.first_name}](tg://user?id={user_id}) (ID: {user_id})\n{format_order_confirmation(user_id, payment_method, promocode)}\n\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥](tg://user?id={user_id})"

    if payment_method == "–ö–∞—Ä—Ç–∞ (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞)":
        order_text_admin = f"‚ö†Ô∏è **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ - –û–ü–õ–ê–¢–ê –ö–ê–†–¢–û–ô (–û–ñ–ò–î–ê–ï–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –û–ü–õ–ê–¢–´ –í–†–£–ß–ù–£–Æ)!** ‚ö†Ô∏è\n\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: [{call.from_user.username or call.from_user.first_name}](tg://user?id={user_id}) (ID: {user_id})\n{format_order_confirmation(user_id, payment_method, promocode)}\n\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥](tg://user?id={user_id})"


    for admin_id in ADMIN_USER_IDS:
        bot.send_message(chat_id=admin_id, text=order_text_admin, parse_mode="Markdown", disable_web_page_preview=True)
    if ADMIN_GROUP_ID:
        bot.send_message(chat_id=ADMIN_GROUP_ID, text=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")

    sales_log.append({
        'user_id': user_id,
        'order_time': datetime.datetime.now().isoformat(),
        'cart_items': user_carts[user_id],
        'payment_method': payment_method,
        'promocode': promocode
    })

    user_carts[user_id] = {}
    bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=types.ReplyKeyboardRemove())
    clear_user_state(user_id)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_order')
def cancel_order_callback(call):
    bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_product_list_keyboard())
    clear_user_state(call.from_user.id)

@bot.callback_query_handler(func=lambda call: call.data == 'edit_order')
def edit_order_callback(call):
    bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.", reply_markup=get_product_list_keyboard())
    clear_user_state(call.from_user.id)

@bot.callback_query_handler(func=lambda call: call.data == 'show_catalog')
def show_catalog_callback(call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_product_list_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == 'show_cart')
def show_cart_callback(call):
    user_id = call.from_user.id
    cart_text = format_cart(user_id)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=cart_text, reply_markup=get_cart_keyboard(user_id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def category_callback(call):
    category_id = call.data.split('_')[1]
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories.get(category_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}", reply_markup=get_products_in_category_keyboard(category_id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
def product_callback(call):
    user_id = call.from_user.id
    product_id = call.data.split('_')[1]
    product = products.get(product_id)
    if product:
        if product['stock'] > 0:
            if user_id not in user_carts:
                user_carts[user_id] = {}
            if product_id in user_carts[user_id]:
                user_carts[user_id][product_id] += 1
            else:
                user_carts[user_id][product_id] = 1
            bot.answer_callback_query(call.id, f"{product['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"{product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=get_product_list_keyboard())
        else:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–¢–æ–≤–∞—Ä–∞ '{product['name']}' –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.", reply_markup=get_product_list_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_from_cart_'))
def remove_from_cart_callback(call):
    user_id = call.from_user.id
    product_id = call.data.split('_')[3]
    if user_carts.get(user_id) and product_id in user_carts[user_id]:
        del user_carts[user_id][product_id]
    cart_text = format_cart(user_id)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=cart_text, reply_markup=get_cart_keyboard(user_id))
    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")


# --- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ---
@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        bot.reply_to(message, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())
        set_user_state(user_id, 'admin_menu')
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –∞–¥–º–∏–Ω.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_menu' and get_user_state(call.from_user.id) == 'admin_menu')
@bot.callback_query_handler(func=lambda call: call.data == 'admin_exit' and get_user_state(call.from_user.id) == 'admin_menu') # –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
def admin_menu_callback(call):
      user_id = call.from_user.id
      if call.data == 'admin_menu': # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è "–ê–¥–º–∏–Ω –º–µ–Ω—é"
          pass # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –º–µ–Ω—é —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ
      elif call.data == 'admin_exit':
          bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.", reply_markup=get_product_list_keyboard())
          clear_user_state(user_id)
          return

      if is_admin(user_id):
          bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())
          set_user_state(user_id, 'admin_menu')
      else:
          bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_products' and get_user_state(call.from_user.id) == 'admin_menu')
def admin_products_callback(call):
    if is_admin(call.from_user.id):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=get_admin_products_keyboard())
        set_user_state(call.from_user.id, 'admin_products_menu')
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_categories' and get_user_state(call.from_user.id) == 'admin_menu')
def admin_categories_callback(call):
    if is_admin(call.from_user.id):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=get_admin_categories_keyboard())
        set_user_state(call.from_user.id, 'admin_categories_menu')
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_promocodes' and get_user_state(call.from_user.id) == 'admin_menu')
def admin_promocodes_callback(call):
    if is_admin(call.from_user.id):
        global promocodes_enabled
        promocodes_enabled = not promocodes_enabled
        status = "–í–∫–ª—é—á–µ–Ω—ã" if promocodes_enabled else "–í—ã–∫–ª—é—á–µ–Ω—ã"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü—Ä–æ–º–æ–∫–æ–¥—ã {status}.", reply_markup=get_admin_menu_keyboard())
        set_user_state(call.from_user.id, 'admin_menu') # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_stock' and get_user_state(call.from_user.id) == 'admin_menu')
def admin_stock_callback(call):
     if is_admin(call.from_user.id):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º:", reply_markup=get_admin_stock_keyboard())
        set_user_state(call.from_user.id, 'admin_stock_menu')
     else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_export_import' and get_user_state(call.from_user.id) == 'admin_menu')
def admin_export_import_callback(call):
    if is_admin(call.from_user.id):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç:", reply_markup=get_admin_export_import_keyboard())
        set_user_state(call.from_user.id, 'admin_export_import_menu')
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_sales_log' and get_user_state(call.from_user.id) == 'admin_menu')
def admin_sales_log_callback(call):
    if is_admin(call.from_user.id):
        log_text = "–õ–æ–≥ –ü—Ä–æ–¥–∞–∂:\n"
        for order in sales_log:
            log_text += f"\n–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {order['user_id']} ({order['order_time']})\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order['payment_method']}\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞: {order['cart_items']}\n"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=log_text if sales_log else "–õ–æ–≥ –ø—Ä–æ–¥–∞–∂ –ø—É—Å—Ç.", reply_markup=get_admin_menu_keyboard())
        set_user_state(call.from_user.id, 'admin_sales_log_view')
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_broadcast' and get_user_state(call.from_user.id) == 'admin_menu')
def admin_broadcast_callback(call):
    if is_admin(call.from_user.id):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
        set_user_state(call.from_user.id, 'admin_broadcast_start')
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'admin_broadcast_start' and is_admin(message.from_user.id))
def broadcast_message_handler(message):
    broadcast_text = message.text
    user_ids_to_broadcast = set()

    for order_data in sales_log:
        user_ids_to_broadcast.add(order_data['user_id'])

    broadcast_count = 0
    for user_id in user_ids_to_broadcast:
        try:
            bot.send_message(chat_id=user_id, text=broadcast_text)
            broadcast_count += 1
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    bot.reply_to(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {broadcast_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=get_admin_menu_keyboard())
    set_user_state(message.from_user.id, 'admin_menu') # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é


@bot.callback_query_handler(func=lambda call: call.data == 'admin_add_product' and get_user_state(call.from_user.id) == 'admin_products_menu')
def admin_add_product_callback(call):
    if is_admin(call.from_user.id):
        set_user_state(call.from_user.id, 'admin_add_product_name', data={}) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'admin_add_product_name' and is_admin(message.from_user.id))
def admin_add_product_name_handler(message):
    user_state_data = get_user_state_data(message.from_user.id)
    user_state_data['name'] = message.text
    set_user_state(message.from_user.id, 'admin_add_product_description', data=user_state_data)
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'admin_add_product_description' and is_admin(message.from_user.id))
def admin_add_product_description_handler(message):
    user_state_data = get_user_state_data(message.from_user.id)
    user_state_data['description'] = message.text
    set_user_state(message.from_user.id, 'admin_add_product_price', data=user_state_data)
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'admin_add_product_price' and is_admin(message.from_user.id))
def admin_add_product_price_handler(message):
    try:
        price = float(message.text)
        user_state_data = get_user_state_data(message.from_user.id)
        user_state_data['price'] = price
        set_user_state(message.from_user.id, 'admin_add_product_category', data=user_state_data)
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ):")
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'admin_add_product_category' and is_admin(message.from_user.id))
def admin_add_product_category_handler(message):
    category_name = message.text
    category_id_to_use = None
    for cat_id, cat_name in categories.items():
        if cat_name.lower() == category_name.lower():
            category_id_to_use = cat_id
            break
    if not category_id_to_use:
        category_id_to_use = generate_category_id()
        categories[category_id_to_use] = category_name

    user_state_data = get_user_state_data(message.from_user.id)
    user_state_data['category'] = category_id_to_use
    set_user_state(message.from_user.id, 'admin_add_product_stock', data=user_state_data)
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'admin_add_product_stock' and is_admin(message.from_user.id))
def admin_add_product_stock_handler(message):
    try:
        stock = int(message.text)
        user_state_data = get_user_state_data(message.from_user.id)
        user_state_data['stock'] = stock
        set_user_state(message.from_user.id, 'admin_add_product_image', data=user_state_data)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('/skip')) # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
        bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=markup)
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.")

@bot.message_handler(commands=['skip'], func=lambda message: get_user_state(message.from_user.id) == 'admin_add_product_image' and is_admin(message.from_user.id))
def skip_photo_handler(message):
    user_state_data = get_user_state_data(message.from_user.id)
    user_state_data['image'] = None
    new_product_data = user_state_data
    product_id = generate_product_id()
    products[product_id] = new_product_data
    bot.reply_to(message, f"–¢–æ–≤–∞—Ä '{new_product_data['name']}' (ID: {product_id}) –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=get_admin_products_keyboard())
    clear_user_state(message.from_user.id)
    set_user_state(message.from_user.id, 'admin_products_menu')

@bot.message_handler(content_types=['photo'], func=lambda message: get_user_state(message.from_user.id) == 'admin_add_product_image' and is_admin(message.from_user.id))
def admin_add_product_image_handler(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    image_url = f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}' # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL, –º–æ–∂–Ω–æ –∏ –ª–æ–∫–∞–ª—å–Ω–æ
    user_state_data = get_user_state_data(message.from_user.id)
    user_state_data['image'] = image_url
    new_product_data = user_state_data
    product_id = generate_product_id()
    products[product_id] = new_product_data
    bot.reply_to(message, f"–¢–æ–≤–∞—Ä '{new_product_data['name']}' (ID: {product_id}) –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.", reply_markup=get_admin_products_keyboard())
    clear_user_state(message.from_user.id)
    set_user_state(message.from_user.id, 'admin_products_menu')


@bot.callback_query_handler(func=lambda call: call.data == 'admin_edit_product' and get_user_state(call.from_user.id) == 'admin_products_menu')
def admin_edit_product_callback(call):
    if is_admin(call.from_user.id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        for prod_id, prod_data in products.items():
            markup.add(types.InlineKeyboardButton(f"{prod_data['name']} (ID: {prod_id})", callback_data=f'admin_edit_product_select_{prod_id}'))
        markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤", callback_data='admin_products'))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        set_user_state(call.from_user.id, 'admin_edit_product_select_menu') # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_edit_product_select_') and get_user_state(call.from_user.id) == 'admin_edit_product_select_menu')
def admin_edit_product_select_callback(call):
    if is_admin(call.from_user.id):
        product_id = call.data.split('_')[-1]
        set_user_state(call.from_user.id, 'admin_edit_product_field_select', data={'product_id': product_id}) # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data='edit_field_name'),
            types.InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ", callback_data='edit_field_description'),
            types.InlineKeyboardButton("–¶–µ–Ω–∞", callback_data='edit_field_price'),
            types.InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data='edit_field_category'),
            types.InlineKeyboardButton("–û—Å—Ç–∞—Ç–æ–∫", callback_data='edit_field_stock'),
            types.InlineKeyboardButton("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data='edit_field_image'),
            types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data='admin_edit_product')
        )
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ID: {product_id}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_field_') and get_user_state(call.from_user.id) == 'admin_edit_product_field_select')
def admin_edit_product_field_callback(call):
    if is_admin(call.from_user.id):
        field = call.data.split('_')[-1]
        user_state_data = get_user_state_data(call.from_user.id)
        user_state_data['edit_field'] = field
        set_user_state(call.from_user.id, 'admin_edit_product_value_input', data=user_state_data) # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field}':", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'admin_edit_product_value_input' and is_admin(message.from_user.id))
def admin_edit_product_value_handler(message):
    user_state_data = get_user_state_data(message.from_user.id)
    product_id = user_state_data['product_id']
    field = user_state_data['edit_field']
    new_value = message.text

    if field == 'price':
        try:
            new_value = float(new_value)
        except ValueError:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")
            return
    elif field == 'stock':
        try:
            new_value = int(new_value)
        except ValueError:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.")
            return
    elif field == 'category': # –ë–∞–∑–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
         category_name = new_value
         category_id_to_use = None
         for cat_id, cat_name in categories.items():
             if cat_name.lower() == category_name.lower():
                 category_id_to_use = cat_id
                 break
         if not category_id_to_use:
             category_id_to_use = generate_category_id()
             categories[category_id_to_use] = category_name
         new_value = category_id_to_use

    products[product_id][field] = new_value
    bot.reply_to(message, f"–ü–æ–ª–µ '{field}' —Ç–æ–≤–∞—Ä–∞ ID {product_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_admin_products_keyboard())
    clear_user_state(message.from_user.id)
    set_user_state(message.from_user.id, 'admin_products_menu')


@bot.callback_query_handler(func=lambda call: call.data == 'admin_add_category' and get_user_state(call.from_user.id) == 'admin_categories_menu')
def admin_add_category_callback(call):
    if is_admin(call.from_user.id):
        set_user_state(call.from_user.id, 'admin_add_category_name')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'admin_add_category_name' and is_admin(message.from_user.id))
def admin_add_category_name_handler(message):
    category_name = message.text
    category_id = generate_category_id()
    categories[category_id] = category_name
    bot.reply_to(message, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {category_id}).", reply_markup=get_admin_categories_keyboard())
    clear_user_state(message.from_user.id)
    set_user_state(message.from_user.id, 'admin_categories_menu')

@bot.callback_query_handler(func=lambda call: call.data == 'admin_view_stock' and get_user_state(call.from_user.id) == 'admin_stock_menu')
def admin_view_stock_callback(call):
    if is_admin(call.from_user.id):
        stock_text = "–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:\n"
        for prod_id, prod_data in products.items():
            stock_text += f"- {prod_data['name']} (ID: {prod_id}): {prod_data['stock']} —à—Ç.\n"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=stock_text if products else "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=get_admin_stock_keyboard())
        set_user_state(call.from_user.id, 'admin_stock_view')
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_adjust_stock' and get_user_state(call.from_user.id) == 'admin_stock_menu')
def admin_adjust_stock_callback(call):
    if is_admin(call.from_user.id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        for prod_id, prod_data in products.items():
            markup.add(types.InlineKeyboardButton(f"{prod_data['name']} (ID: {prod_id})", callback_data=f'admin_adjust_stock_select_{prod_id}'))
        markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞", callback_data='admin_stock'))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)
        set_user_state(call.from_user.id, 'admin_adjust_stock_select_menu')

    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_adjust_stock_select_') and get_user_state(call.from_user.id) == 'admin_adjust_stock_select_menu')
def admin_adjust_stock_select_callback(call):
     if is_admin(call.from_user.id):
        product_id = call.data.split('_')[-1]
        set_user_state(call.from_user.id, 'admin_adjust_stock_quantity_input', data={'product_id': product_id})
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID {product_id} (—É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ):", reply_markup=types.ReplyKeyboardRemove())
     else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'admin_adjust_stock_quantity_input' and is_admin(message.from_user.id))
def admin_adjust_stock_quantity_handler(message):
    product_id = get_user_state_data(message.from_user.id)['product_id']
    try:
        quantity_to_reduce = int(message.text)
        if product_id in products:
            products[product_id]['stock'] -= quantity_to_reduce
            if products[product_id]['stock'] < 0:
                products[product_id]['stock'] = 0
            bot.reply_to(message, f"–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ ID {product_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {quantity_to_reduce}. –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {products[product_id]['stock']}.", reply_markup=get_admin_stock_keyboard())

        else:
            bot.reply_to(message, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        clear_user_state(message.from_user.id)
        set_user_state(message.from_user.id, 'admin_stock_menu') # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —á–∏—Å–ª–æ–º.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_export_products' and get_user_state(call.from_user.id) == 'admin_export_import_menu')
def admin_export_products_callback(call):
    if is_admin(call.from_user.id):
         markup = types.InlineKeyboardMarkup()
         markup.add(types.InlineKeyboardButton("CSV", callback_data='export_csv'), types.InlineKeyboardButton("TXT", callback_data='export_txt'))
         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=markup)
         set_user_state(call.from_user.id, 'admin_export_select_format_menu')
    else:
         bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'export_csv' and get_user_state(call.from_user.id) == 'admin_export_select_format_menu')
def export_csv_callback(call):
    if is_admin(call.from_user.id):
        filename = export_products_to_csv()
        with open(filename, 'rb') as file:
            bot.send_document(call.message.chat.id, file)
        clear_user_state(call.from_user.id)
        set_user_state(call.from_user.id, 'admin_export_import_menu') # –í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'export_txt' and get_user_state(call.from_user.id) == 'admin_export_select_format_menu')
def export_txt_callback(call):
    if is_admin(call.from_user.id):
        filename = export_products_to_txt()
        with open(filename, 'rb') as file:
            bot.send_document(call.message.chat.id, file)
        clear_user_state(call.from_user.id)
        set_user_state(call.from_user.id, 'admin_export_import_menu') # –í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_import_products' and get_user_state(call.from_user.id) == 'admin_export_import_menu')
def admin_import_products_callback(call):
    if is_admin(call.from_user.id):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –ü–æ–ª—è –≤ CSV –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å: product_id, name, description, price, category, stock (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω).", reply_markup=types.ReplyKeyboardRemove())
        set_user_state(call.from_user.id, 'admin_import_products_waiting_file')
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(content_types=['document'], func=lambda message: get_user_state(message.from_user.id) == 'admin_import_products_waiting_file' and is_admin(message.from_user.id))
def import_products_document_handler(message):
    try:
        if message.document.file_name.endswith('.csv'):
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            text_file = downloaded_file.decode('utf-8') # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º UTF-8. –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            reader = csv.DictReader(text_file.splitlines())
            imported_count = 0
            for row in reader:
                product_id = row.get('product_id') or generate_product_id()
                products[product_id] = {
                    'name': row.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'description': row.get('description', ''),
                    'price': float(row.get('price', 0)),
                    'category': row.get('category', 'default_category'), # –ò–ª–∏ —Å–æ–∑–¥–∞–µ–º 'default_category' –µ—Å–ª–∏ –Ω–µ—Ç
                    'stock': int(row.get('stock', 0)),
                    'image': row.get('image', None)
                }
                imported_count += 1
            bot.reply_to(message, f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞.", reply_markup=get_admin_menu_keyboard())

        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª.")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CSV —Ñ–∞–π–ª–∞: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.", reply_markup=get_admin_menu_keyboard())

    clear_user_state(message.from_user.id)
    set_user_state(message.from_user.id, 'admin_export_import_menu') # –í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –ë–î –∏–ª–∏ —Ñ–∞–π–ª–∞)
    categories['1'] = '–§—Ä—É–∫—Ç—ã'
    categories['2'] = '–û–≤–æ—â–∏'
    products['1'] = {'name': '–Ø–±–ª–æ–∫–æ', 'description': '–°–æ—á–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ —è–±–ª–æ–∫–æ', 'price': 50, 'category': '1', 'stock': 100, 'image': None}
    products['2'] = {'name': '–ë–∞–Ω–∞–Ω', 'description': '–°–ø–µ–ª—ã–π –∂–µ–ª—Ç—ã–π –±–∞–Ω–∞–Ω', 'price': 30, 'category': '1', 'stock': 50, 'image': None}
    products['3'] = {'name': '–ü–æ–º–∏–¥–æ—Ä', 'description': '–ö—Ä–∞—Å–Ω—ã–π —Å–ø–µ–ª—ã–π –ø–æ–º–∏–¥–æ—Ä', 'price': 60, 'category': '2', 'stock': 75, 'image': None}

    bot.polling(none_stop=True)
